version: '3.8'

services:
  # ========================================
  # API Gateway (Nginx)
  # ========================================
  nginx:
    image: nginx:latest
    container_name: ba-ai-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - ml-service
    networks:
      - ba-ai-network
    environment:
      - BACKEND_HOST=backend:5000
      - ML_SERVICE_HOST=ml-service:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Node.js Backend
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ba-ai-backend
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=5000
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - ML_SERVICE_URL=http://ml-service:8000
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - LANGGRAPH_ENABLED=false
    depends_on:
      - rabbitmq
    networks:
      - ba-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Python ML Service (FastAPI)
  # ========================================
  ml-service:
    build:
      context: ./python-ml-service
      dockerfile: Dockerfile
    container_name: ba-ai-ml-service
    ports:
      - "8000:8000"
    volumes:
      - ./python-ml-service:/app
      - /app/__pycache__
      - ./models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - MODEL_PROVIDER=anthropic
      - LOG_LEVEL=info
    depends_on:
      - rabbitmq
    networks:
      - ba-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ml/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # RabbitMQ Message Queue
  # ========================================
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ba-ai-rabbitmq
    ports:
      - "5672:5672"      # AMQP
      - "15672:15672"    # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - ba-ai-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================================
  # PostgreSQL Database (Later: Model Registry)
  # ========================================
  postgres:
    image: postgres:15
    container_name: ba-ai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ba_ai
      - POSTGRES_USER=ba_ai
      - POSTGRES_PASSWORD=development
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ba-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ba_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # Redis Cache (Optional: Caching, Sessions)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: ba-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ba-ai-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # Frontend (React - Later)
  # ========================================
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: ba-ai-frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - REACT_APP_API_URL=http://localhost/api
  #   depends_on:
  #     - backend
  #   networks:
  #     - ba-ai-network

networks:
  ba-ai-network:
    driver: bridge

volumes:
  rabbitmq-data:
  postgres-data:
  redis-data:
